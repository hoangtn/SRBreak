\name{SRBreak}
\alias{SRBreak}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
SRBreak(readDepthWindow = 500, chr = NULL, st = NULL, en = NULL, dirBamFile = NULL, genes = NULL, geneNames = NULL, rdQualityMapping = 10, correctGC = TRUE, byGCcontent = 1, useRSamtoolsToCount = FALSE, byMAPPABILITYcontent = 1, mappabilityFile = NULL, detectAllRegion = TRUE, quantileThresholdOfSD = 0.85, lowerCNThreshold = -0.3, upperCNThreshold = 0.3, countThreshold = 5, sigMaTemp = windows/3, NTimes = 50, testType = c("SD", "Count", "positiveCount", "negativeCount"), pemMappingQuality = 0, epsilonPairedOpen = NULL, thresholdOfIntersectionBetweenRDandPEM = 0.7, splitreadMappingQuality = 0, epsilonSplitReadOpen = 160, sdSplitRead = 0.5, usingPairedEnds = TRUE)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{readDepthWindow}{
%%     ~~Describe \code{readDepthWindow} here~~
}
  \item{chr}{
%%     ~~Describe \code{chr} here~~
}
  \item{st}{
%%     ~~Describe \code{st} here~~
}
  \item{en}{
%%     ~~Describe \code{en} here~~
}
  \item{dirBamFile}{
%%     ~~Describe \code{dirBamFile} here~~
}
  \item{genes}{
%%     ~~Describe \code{genes} here~~
}
  \item{geneNames}{
%%     ~~Describe \code{geneNames} here~~
}
  \item{rdQualityMapping}{
%%     ~~Describe \code{rdQualityMapping} here~~
}
  \item{correctGC}{
%%     ~~Describe \code{correctGC} here~~
}
  \item{byGCcontent}{
%%     ~~Describe \code{byGCcontent} here~~
}
  \item{useRSamtoolsToCount}{
%%     ~~Describe \code{useRSamtoolsToCount} here~~
}
  \item{byMAPPABILITYcontent}{
%%     ~~Describe \code{byMAPPABILITYcontent} here~~
}
  \item{mappabilityFile}{
%%     ~~Describe \code{mappabilityFile} here~~
}
  \item{detectAllRegion}{
%%     ~~Describe \code{detectAllRegion} here~~
}
  \item{quantileThresholdOfSD}{
%%     ~~Describe \code{quantileThresholdOfSD} here~~
}
  \item{lowerCNThreshold}{
%%     ~~Describe \code{lowerCNThreshold} here~~
}
  \item{upperCNThreshold}{
%%     ~~Describe \code{upperCNThreshold} here~~
}
  \item{countThreshold}{
%%     ~~Describe \code{countThreshold} here~~
}
  \item{sigMaTemp}{
%%     ~~Describe \code{sigMaTemp} here~~
}
  \item{NTimes}{
%%     ~~Describe \code{NTimes} here~~
}
  \item{testType}{
%%     ~~Describe \code{testType} here~~
}
  \item{pemMappingQuality}{
%%     ~~Describe \code{pemMappingQuality} here~~
}
  \item{epsilonPairedOpen}{
%%     ~~Describe \code{epsilonPairedOpen} here~~
}
  \item{thresholdOfIntersectionBetweenRDandPEM}{
%%     ~~Describe \code{thresholdOfIntersectionBetweenRDandPEM} here~~
}
  \item{splitreadMappingQuality}{
%%     ~~Describe \code{splitreadMappingQuality} here~~
}
  \item{epsilonSplitReadOpen}{
%%     ~~Describe \code{epsilonSplitReadOpen} here~~
}
  \item{sdSplitRead}{
%%     ~~Describe \code{sdSplitRead} here~~
}
  \item{usingPairedEnds}{
%%     ~~Describe \code{usingPairedEnds} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (readDepthWindow = 500, chr = NULL, st = NULL, en = NULL, 
    dirBamFile = NULL, genes = NULL, geneNames = NULL, rdQualityMapping = 10, 
    correctGC = TRUE, byGCcontent = 1, useRSamtoolsToCount = FALSE, 
    byMAPPABILITYcontent = 1, mappabilityFile = NULL, detectAllRegion = TRUE, 
    quantileThresholdOfSD = 0.85, lowerCNThreshold = -0.3, upperCNThreshold = 0.3, 
    countThreshold = 5, sigMaTemp = windows/3, NTimes = 50, testType = c("SD", 
        "Count", "positiveCount", "negativeCount"), pemMappingQuality = 0, 
    epsilonPairedOpen = NULL, thresholdOfIntersectionBetweenRDandPEM = 0.7, 
    splitreadMappingQuality = 0, epsilonSplitReadOpen = 160, 
    sdSplitRead = 0.5, usingPairedEnds = TRUE) 
{
    if (is.null(genes)) 
        genes <- c((st + en)/2, (st + en)/2 + 1000)
    if (is.null(geneNames)) 
        geneNames <- "gene"
    objectCNVrd2 <- new("CNVrd2", windows = readDepthWindow, 
        chr = chr, st = st, en = en, dirBamFile = dirBamFile, 
        genes = genes, geneNames = geneNames)
    rawcntMatrix0 <- countReadInWindow(Object = objectCNVrd2, 
        rawReadCount = TRUE, qualityThreshold = rdQualityMapping, 
        correctGC = correctGC, byGCcontent = byGCcontent, useRSamtoolsToCount = useRSamtoolsToCount)
    message("Correcting mappability bias")
    objectCNVrd2
    rawcntMatrix01 <- correctMappability(readCountMatrix = rawcntMatrix0, 
        chr = objectCNVrd2@chr, start = objectCNVrd2@st, end = objectCNVrd2@en, 
        mappabilityFile = mappabilityFile, byMAPPABILITYcontent = byMAPPABILITYcontent)
    rawcntMatrix <- t(apply(rawcntMatrix01, 1, function(x) {
        temp <- x/median(x)
        temp <- temp - 1
        return(temp)
    }))
    resultSegment <- segmentSamples(Object = objectCNVrd2, stdCntMatrix = rawcntMatrix)
    polymorphicRegion <- identifyPolymorphicRegion(Object = objectCNVrd2, 
        segmentObject = resultSegment, plotPolymorphicRegion = FALSE)
    testOut <- detectBreakPointFromRD(polymorphicObject = polymorphicRegion, 
        genes = objectCNVrd2@genes, windows = objectCNVrd2@windows, 
        detectAllRegion = detectAllRegion, quantileThreshold = quantileThresholdOfSD, 
        upperCNThreshold = upperCNThreshold, lowerCNThreshold = lowerCNThreshold, 
        countThreshold = countThreshold, testType = testType, 
        sigMaTemp = sigMaTemp, NTimes = NTimes)
    reportOutData <- NULL
    for (kk in 1:length(testOut)) {
        testOutPairedEnd <- detectBreakpointFromPairedEnds(resultFromRD = testOut[[kk]], 
            dirBamFile = dirBamFile, windows = objectCNVrd2@windows, 
            chr = objectCNVrd2@chr, qualityThreshold = pemMappingQuality, 
            epsilonPairedOpen = epsilonPairedOpen, thresholdOfIntersection = thresholdOfIntersectionBetweenRDandPEM)
        finalOutAll <- getSplitReadBreakpoint(resultFromRD = testOutPairedEnd, 
            dirBamFile = dirBamFile, windows = objectCNVrd2@windows, 
            chr = objectCNVrd2@chr, qualityThreshold = splitreadMappingQuality, 
            epsilonOpen = epsilonSplitReadOpen, sdSplitRead = sdSplitRead, 
            usingPairedEnds = usingPairedEnds)
        reportOutData <- rbind(reportOutData, finalOutAll)
    }
    breakpointFinal <- unique(reportOutData[, c(5, 7, 8)])
    breakpointFinal <- breakpointFinal[breakpointFinal[, 1] != 
        "NORMAL", ]
    breakpointDataFrame <- matrix("N", ncol = dim(rawcntMatrix)[1] + 
        3, nrow = dim(breakpointFinal)[1])
    colnames(breakpointDataFrame) <- c("chr", "start", "end", 
        rownames(rawcntMatrix))
    breakpointDataFrame[, c(2, 3)] <- breakpointFinal[, c(2, 
        3)]
    breakpointDataFrame[, 1] <- rep(objectCNVrd2@chr, dim(breakpointFinal)[1])
    shortReport <- reportOutData[, c(1, 5, 7, 8)]
    shortReport <- shortReport[shortReport[, 2] != "NORMAL", 
        ]
    for (jj in 1:dim(breakpointDataFrame)[1]) {
        tempShortData <- shortReport[(shortReport[, 3] == breakpointDataFrame[jj, 
            2]) & (shortReport[, 4] == breakpointDataFrame[jj, 
            3]), ]
        if (is.data.frame(tempShortData) | is.matrix(tempShortData)) {
            indexColumn <- pmatch(tempShortData[, 1], colnames(breakpointDataFrame))
            breakpointDataFrame[jj, indexColumn] <- tempShortData[, 
                2]
        }
        else {
            indexColumn <- pmatch(tempShortData[1], colnames(breakpointDataFrame))
            breakpointDataFrame[jj, indexColumn] <- tempShortData[2]
        }
    }
    breakpointDataFrame <- breakpointDataFrame[order(breakpointDataFrame[, 
        2]), ]
    breakpointDataFrame <- breakpointDataFrame[(as.numeric(breakpointDataFrame[, 
        3]) - as.numeric(breakpointDataFrame[, 2])) >= 1000, 
        ]
    return(list(svResult = breakpointDataFrame, objectSRBreak = objectCNVrd2, 
        polymorphicRegionObject = polymorphicRegion))
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
